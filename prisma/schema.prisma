// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id        Int      @id @default(autoincrement())
  fullname  String
  email     String   @unique
  password  String
  blog      Blog[]
  product   Product[]
  otp       Otp[]
  transaction Transaction[]
  type	    Boolean  @default(false)
  is_active	    Boolean  @default(false)
}

model Otp {
  id        Int      @id @default(autoincrement())
  code      Int
  expire_time   DateTime    @default(now())
  userId    Int

  otp      User     @relation(fields: [userId], references: [id])
}

model BlogCategory {
  id        Int      @id @default(autoincrement())
  title     String   @unique
  blog      Blog[]
}

model Blog {
  id          Int      @id @default(autoincrement())
  title       String
  content     String
  imageurl    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  authorId    Int
  categoryId  Int

  author      User     @relation(fields: [authorId], references: [id])
  category    BlogCategory @relation(fields: [categoryId], references: [id])
}

model ProductCategory {
  id        Int      @id @default(autoincrement())
  title     String   @unique
  product      Product[]
}

model Product {
  id          Int      @id @default(autoincrement())
  title       String
  content     String
  imageurl    String
  fileurl     String
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  authorId    Int
  categoryId  Int

  author      User     @relation(fields: [authorId], references: [id])
  category    ProductCategory @relation(fields: [categoryId], references: [id])

  transaction Transaction[]
}

model Transaction {
  id          Int         @id @default(autoincrement())
  userId      Int
  productId   Int
  amount      Float
  status      String
  createdAt   DateTime    @default(now())
  payment   Payment[]
  user        User        @relation(fields: [userId], references: [id])
  product     Product     @relation(fields: [productId], references: [id])
}

model Payment {
  id          Int         @id @default(autoincrement())
  transactionId Int
  amount      Float
  status      String
  paymentMethod String
  paymentDate DateTime    @default(now())
  transaction Transaction @relation(fields: [transactionId], references: [id])
}
